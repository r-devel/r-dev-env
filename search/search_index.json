{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"R Dev Container","text":""},{"location":"#project-background","title":"Project Background","text":"<p>The standard development process used by members of the R Core Team involves an iterative process of making changes to the source code, re-building R and exploring/testing the changes made. This process presents a big hurdle for new contributors to R, as setting up their system to build R can be non-trivial, requiring a lot of trouble-shooting, especially on Windows and macOS. On Linux and macOS, it is not straight-forward to work with different versions of R side-by-side and care needs to be taken not to corrupt or over-write the user's existing version of R/R packages.</p> <p>For these reasons, we propose to create containerized development environments for R. Our focus will be on creating a complete environment, including an IDE, that will provide a familiar space for R developers to work on contributions to base R.</p>"},{"location":"#contributors","title":"Contributors","text":"<p>GSoC contributor: Atharva Shirdhankar</p> <p>Mentors: Heather Turner, James Tripp, Iain Emsley</p>"},{"location":"resources/","title":"Useful Links","text":"<ul> <li>R in Visual Studio code</li> <li>VSCode R Wiki</li> <li>Getting started with Dev Containers</li> <li>Install Docker Desktop</li> <li>Installing Docker on Linux</li> </ul>"},{"location":"troubleshoot/","title":"Troubleshooting Info","text":"<p>While working with an R Dev Container, you may encounter some known errors. Here are a few common ones:</p>"},{"location":"troubleshoot/#error-rsync-connection-limit-reached-preventing-new-connections","title":"Error: Rsync Connection Limit Reached, Preventing New Connections","text":"<p>Description : When attempting to use rsync, you may encounter the following error message:</p> <pre><code>$TOP_SRCDIR/tools/rsync-recommended @ERROR: max connections (59) reached -- try again later rsync error: error starting client-server protocol (code 5) at main.c(1863) [Receiver=3.2.7] *** rsync failed to update Recommended files ***\n</code></pre> <p>Cause : This error occurs because the rsync server has reached its maximum allowed number of simultaneous connections, which is set to 59. As a result, new connection attempts are rejected until some of the existing connections are closed.</p> <p>Solutions : 1. Retry After Some Time : Wait for a few minutes and try running the rsync    command again. The number of active connections may decrease, allowing    you to connect. 2. Restart Codespace : Sometimes, simply restarting your Codespace can    resolve temporary connection issues. Try restarting your Codespace and    then attempt the rsync command again.</p>"},{"location":"container_setup/","title":"Container Setup","text":"<p>You can run the R Dev Container in one of the ways:</p> <ul> <li> <p>GitHub Codespaces: Offers 60 hours per month of free usage for 2-core   set-ups and 15GB of free storage. The R Dev Container codespace is set up to   use 4 cores by default, which gives users 30 hours per month of free   usage. Check out the Codespace pricing   docs   for more information.</p> </li> <li> <p>Gitpod Workspaces: Offers 50 hours per month of free usage. Check out the   Gitpod pricing docs for more information.</p> </li> <li> <p>Local Setup: Currently recommended for Linux users only.</p> </li> </ul> <p>Explore the sub-sections for detailed instructions on setting up and using the container for each option.</p>"},{"location":"container_setup/github_codespace/codespacestartstop/","title":"Stopping and Restarting","text":""},{"location":"container_setup/github_codespace/codespacestartstop/#how-to-stop-codespaces","title":"How to Stop Codespaces?","text":"<ul> <li> <p>To stop codespaces we just need to navigate to the Codespaces option in the   bottom left of the Codespace panel.</p> <p></p> </li> <li> <p>After clicking on codespaces option we will get a drop down above something   like this\ud83d\udc47</p> <p></p> </li> <li> <p>Click on \"Stop Current Codespace\". It will stop the codespaces you are   currently using or running.</p> </li> <li> <p>You will be redirected to a Restart Codespaces page. The page shows a link to   restart the codespace you just stopped.</p> <p></p> </li> </ul>"},{"location":"container_setup/github_codespace/codespacestartstop/#idle-timeout","title":"Idle timeout","text":"<p>If you do not interact with the codespace, it will close automatically when it reaches the idle timeout limit. By default, this is 30 minutes, but you can set a personal timeout limit in your GitHub settings.</p> <p>The code changes and operations we have performed inside the codespace will still be inside the stopped codespace. If your codespace is stopped then you can restart it as shown below.</p>"},{"location":"container_setup/github_codespace/codespacestartstop/#how-to-restart-codespaces-again","title":"How to Restart Codespaces again?","text":"<ul> <li>Go to github.com/codespaces</li> <li>Here we can see a list of the codespaces we have created </li> <li>To restart it, we can just click on the codespaces we wanted to use and it   will start the codespaces again for us.</li> <li>You can also see an active label added to the codespaces we just started  </li> </ul>"},{"location":"container_setup/github_codespace/codespacestartstop/#managing-and-sustaining-codespaces","title":"Managing and Sustaining Codespaces","text":""},{"location":"container_setup/github_codespace/codespacestartstop/#setting-a-default-retention-period-for-your-codespaces","title":"Setting a Default Retention Period for Your Codespaces","text":"<p>Access Settings:</p> <ul> <li>Click your profile photo in the upper-right corner of any GitHub page.</li> <li>Click \"Settings.\"</li> </ul> <p>Navigate to Codespaces Settings:</p> <ul> <li>In the sidebar, under \"Code, planning, and automation,\" click \"Codespaces.\"</li> </ul> <p>Set Retention Period:</p> <ul> <li>Under \"Default retention period,\" enter the number of days (between 0 and 30) for which you want your codespaces to be retained after they have been stopped. Example: Setting it to 30 days.  </li> </ul> <p>Warning:</p> <ul> <li>Setting the retention period to 0 days will result in immediate deletion of codespaces when stopped or when they timeout due to inactivity.  For more details, refer to \"Setting your timeout period for GitHub Codespaces.\"</li> </ul> <p>Save Changes:</p> <ul> <li>Click \"Save\" to apply the new retention period.</li> </ul> <p>This allows you to customize how long your codespaces are kept before automatic deletion, balancing convenience and storage management.</p> <p>Auto Delete Codespace:</p> <ul> <li>Go to the \"Your codespaces\" page at   github.com/codespaces.</li> <li>Find the codespace you want to exempt from deletion.</li> <li>Click the options menu (three dots) to the right of the codespace.</li> <li>Select \"Auto Delete Codespace\" from the dropdown menu. The bookmarked   codespaces will not be auto-deleted.</li> </ul>"},{"location":"container_setup/github_codespace/creating_codespace/","title":"Starting Codespace","text":"<ol> <li> <p>From the main branch of the r-dev-env repo, click on the 'Open in GitHub Codespaces' button and then click the green 'Create Codespace' button. </p> <p>!!! Note You will see the message \"Codespace usage for this repository is     paid for by ...\", with your username. Don't panic!</p> <pre><code>GitHub Codespaces offers 120 core hours of free usage per month for every GitHub user. So the actual number of free hours is 120 divided by the number of cores you are using to run your codespaces.\nFor the r-dev-env codespace we have set the codespace usage to 4 cores which leads to 30hrs of free usage per month. This can be changed according to your preference.\n\nFor more details about codespaces billing, see the [Codespaces Billing Docs](https://github.com/features/codespaces).\nYou can calculate your GitHub services usage with the [GitHub Services\nPricing Calculator](https://github.com/pricing/calculator) and check your usage allowance under \"Codespaces\" on your [GitHub Billing page](https://github.com/settings/billing).\n</code></pre> </li> <li> <p>The codespace setup screen will then be shown. Starting the container may    take a minute or so.</p> </li> <li> <p>You will be taken to a VSCode editor within your browser. </p> </li> </ol>"},{"location":"container_setup/github_codespace/live_share/","title":"Collaborating with Live Share","text":"<p>Live Share is a powerful feature that allows you to collaborate with others in real time directly within VS Code/GitHub Codespaces. You can share your code, terminal, debugging sessions, and more with your collaborators. To use Live Share with the R Dev Container follow the guide below.</p> <p>Note</p> <p>If you are using the R Dev Container locally you must have the Live Share Extension installed to start a Live Share Session. You will be asked to sign in using your Microsoft or GitHub account when starting the session.</p>"},{"location":"container_setup/github_codespace/live_share/#start-a-live-share-session","title":"Start a Live Share Session","text":"<ol> <li> <p>Click the \"Live Share\" button in the status bar.  Alternatively you can go to Live Share extension tab and select from the options to share with read/write permission or share with read-only permission.  </p> </li> <li> <p>Share the Link: A sharing link will be generated and copied to the clipboard for sharing with your collaborators. From the pop-up dialog, you can copy the link again or switch the permissions from read/write to read-only (or vice versa).  </p> </li> </ol>"},{"location":"container_setup/github_codespace/live_share/#join-a-live-share-session","title":"Join a Live Share Session","text":"<ol> <li>Receive the link from the host. The link will be of the form    <code>https://prod.liveshare.vsengsaas.visualstudio.com/join?[37 alphanumberic    characters]</code></li> <li> <p>Choose how to join the session:</p> <ul> <li>Open the link in a web browser: click the link to open it in your web   browser. If you have VS Code installed locally, a pop-up dialog will give   you the choice of continuing in the web or opening the session in VS   Code. You can join the session anonymously or sign in with your Microsoft   or GitHub account.</li> <li>Copy the link into VSCode or the R Dev Container Codespace: From the Live share extension tab, click the \"Join\" button. If you are using VS Code locally, you can choose to join the session anonymously or sign in with your Microsoft or GitHub account. If you are using the Codespace, you will already be signed in with your GitHub account. A pop-up at the top of the VSCode window will ask for the Live Share session link. Paste the link and click 'Enter'. .</li> </ul> </li> <li> <p>Wait to be accepted by the host. The host will receive a pop-up message    where they can accept your request to join.</p> </li> </ol>"},{"location":"container_setup/github_codespace/live_share/#collaborate-in-real-time","title":"Collaborate in Real-Time","text":"<p>Once joined, you can:</p> <ul> <li>Edit Code Together: Both the host and guests can edit files, and changes   will be synchronized in real-time.</li> <li>Share Terminals: The host can share bash or R terminals. Guests can see   the terminal output and, if granted permission, type commands.</li> <li>Live Chat: Session chat can be opened from the Live share extension tab.  </li> </ul>"},{"location":"container_setup/github_codespace/live_share/#manage-control","title":"Manage control","text":"<ol> <li>Manage permissions: In a session with read/write permissions, the host    can change permissions for each shared terminal by right-clicking the    terminal name on the Live Share tab.</li> <li>Follow Mode: Both the host and guests can enable \"Follow Mode\" to follow    each other\u2019s cursor and view.</li> </ol>"},{"location":"container_setup/github_codespace/live_share/#session-persistance","title":"Session persistance","text":"<p>You can rejoin a session if disconnected, and your previous state will be restored.</p>"},{"location":"container_setup/github_codespace/live_share/#close-a-live-share-session","title":"Close a Live Share Session","text":"<p>When you want to close the live share session, you can go to Live Share Extension tab and click on stop icon.  .</p> <p>If you are a guest, the live share session will continue to run without you. If you are the host this will close the session for everyone.</p> <p>Alternatively, you can click the \"Live Share\" button in the status bar to leave or stop the session.</p>"},{"location":"container_setup/github_codespace/live_share/#tips-for-effective-collaboration","title":"Tips for Effective Collaboration","text":"<ul> <li>Use Voice/Video Chat: Combine Live Share with a voice or video call (e.g.,   Zoom, Teams, etc.) for better communication.</li> <li>Share Comments: Use comments in the code to communicate specific points or   suggestions.</li> </ul>"},{"location":"container_setup/gitpod_workspace/live_share/","title":"Collaborating with Live Share","text":""},{"location":"container_setup/gitpod_workspace/live_share/#gitpod-live-share-alternative","title":"Gitpod Live Share Alternative","text":"<ol> <li> <p>Gitpod live share can be started from dashboard itself by clicking on <code>Share</code>    option on dashboard.</p> <p></p> </li> <li> <p>After that whenever you open Gitpod Workspace the live share is enabled and    ready to share workspace with others.</p> <p></p> <p>!!! Note: The live share will be enabled even if you close the workspace.</p> </li> </ol>"},{"location":"container_setup/gitpod_workspace/workspacestart/","title":"Start Workspace","text":""},{"location":"container_setup/gitpod_workspace/workspacestart/#starting-a-gitpod-workspace","title":"Starting a Gitpod Workspace","text":"<ol> <li> <p>Log In: Go to the Gitpod login page and sign in with your GitHub, GitLab, or Bitbucket account. This allows Gitpod to create workspaces from your repositories.</p> </li> <li> <p>Create a workspace using the R Dev Container repo: Click the Gitpod badge below to open the Gitpod workspace creation dialog with the relevant options pre-filled:</p> <p> </p> <p> </p> <p>Click the \"Continue\" button in the Gitpod dialog to create a workspace. It will take approximately 15-20 minutes to create the workspace for the first time. The environment will be cached for faster startup in the future.</p> <p>Note</p> <p>free monthly Gitpod usage, which is 50 hours per month of Standard workspace usage. See the billing docs for more information.</p> </li> </ol>"},{"location":"container_setup/gitpod_workspace/workspacestop_and_restart/","title":"Stopping and Restarting","text":""},{"location":"container_setup/gitpod_workspace/workspacestop_and_restart/#stopping-a-gitpod-workspace","title":"Stopping a Gitpod Workspace","text":"<ol> <li> <p>Locate the Gitpod Command Palette Button: To stop the current workspace, look for the orange Gitpod command palette button in the bottom left corner of the workspace.</p> <p> 2. Open the Command Palette and Stop the Workspace: After clicking on the Gitpod command palette button, a pop-up will appear from the top of the screen. Select the Gitpod: Stop Workspace option to stop the current workspace.</p> <p></p> <p>!!! Note Stopping a workspace will save its state, so you can resume later     without losing your progress.</p> </li> </ol>"},{"location":"container_setup/gitpod_workspace/workspacestop_and_restart/#restarting-a-gitpod-workspace","title":"Restarting a Gitpod Workspace","text":"<ol> <li> <p>Open Gitpod Dashboard: Once you're in the Gitpod dashboard, navigate to the \"Workspaces\" section. In the \"Workspaces\" section, you will see a list of your current and past workspaces. Locate the workspace you want to restart. Stopped workspaces will have an indicator showing they are not running.</p> <p> 2. Restart the Workspace: To restart a workspace, click on the workspace in the list you want to restart. This will launch the workspace, restoring it to the state it was in when it was last stopped.</p> </li> </ol>"},{"location":"container_setup/gitpod_workspace/workspacestop_and_restart/#managing-and-sustaining-codespaces","title":"Managing and Sustaining Codespaces","text":""},{"location":"container_setup/gitpod_workspace/workspacestop_and_restart/#gitpod-workspace-pinning","title":"Gitpod Workspace Pinning","text":"<p>Purpose: Workspace pinning prevents important workspaces from being automatically deleted.</p> <p>Pinned Workspace: A workspace that has been pinned will never be deleted, regardless of inactivity or other automated processes.</p> <p>How to Pin:</p> <ul> <li>Navigate to your workspace list in the Gitpod dashboard.</li> <li>Identify the workspace you want to keep permanently.</li> <li>Pin the workspace to ensure it remains available and is not subject to deletion.  </li> </ul> <p>Benefits:</p> <p>Protects critical projects or environments from accidental loss.  Ensures long-term availability of specific workspaces that you frequently use or need to preserve.</p>"},{"location":"container_setup/local_setup/localsetup/","title":"Docker","text":"<p>Note</p> <p>container will work via a Virtual Machine and building R will take far longer (e.g. a full build may take 1 hour vs 10 minutes!).</p> <p>We can also use this codespace locally. For that we need to have some prerequisites installed.</p>"},{"location":"container_setup/local_setup/localsetup/#prerequisites","title":"&gt; Prerequisites","text":"<ol> <li>Docker Engine or Docker Desktop. You can find the docker desktop install    instructions on Docker Desktop    Docs.</li> <li>VSCode Editor. You can download and install from VSCode    website.</li> </ol>"},{"location":"container_setup/local_setup/localsetup/#steps-to-run-r-development-container-locally","title":"&gt; Steps to run R Development Container locally","text":"<ol> <li>Clone the R Dev Container Github    repo</li> <li>In a terminal, change directory to r-dev-env</li> </ol> <pre><code>cd r-dev-env\n</code></pre> <ol> <li>Restart VSCode in the <code>r-dev-env</code> directory with the command:</li> </ol> <pre><code>code .\n</code></pre> <ol> <li>Checkout the main branch and pull the latest changes</li> </ol> <pre><code>git checkout main\ngit pull\n</code></pre> <p>The main branch provides the stable release. If you require an in-development feature, use the devel branch instead.</p> <ol> <li>After this step please be sure that your docker engine is started. If you    have installed Docker Desktop just open the Docker Desktop app the engine    starts automatically and if you are using just docker engine make sure to    start it with the following command</li> </ol> <pre><code>systemctl start docker\n</code></pre> <ol> <li> <p>We can see pop-up at the bottom right of the VSCode editor which says reopen in Dev Container.  Click on <code>Reopen in DevContainer</code> button.  </p> </li> <li> <p>After clicking on that button we will see our container is getting ready. It will take some time. So till that time you can have coffee :) </p> </li> <li> <p>We can also test whether the dev container is working or not by just printing the environment variables mentioned in the welcome message on the terminal. And there we go!!! We have setup our R Dev Container locally.  </p> </li> <li> <p>The container will be closed when you close VSCode. To reopen the container,    open the <code>r-dev-env</code> directory in VSCode.</p> </li> </ol>"},{"location":"contributor_guide/contributing_to_codebase/","title":"Contributing to codebase","text":""},{"location":"contributor_guide/contributing_to_codebase/#r-dev-env-docker-image-build-workflow","title":"R-Dev-Env Docker Image BUild Workflow","text":"<p>1.</p>"},{"location":"contributor_guide/contributing_to_docs/","title":"Contributing to docs","text":""},{"location":"contributor_guide/contributing_to_docs/#installation-setup","title":"Installation Setup","text":"<ol> <li> <p>Fork and Clone the repo -</p> </li> <li> <p>Change directory to r-dev-env</p> </li> <li> <p>Create virtual environment using python venv</p> </li> </ol> <pre><code>python3 -m venv venv\n</code></pre> <ol> <li>Now activate the virtual environment</li> </ol> <pre><code>source ./venv/bin/activate\n</code></pre> <ol> <li>Now install libraries and dependencies for mkdocs</li> </ol> <pre><code>pip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre> <ol> <li> <p>After setting up the virtual environment and installing necessary libraries,    navigate to the root directory of the project where the <code>mkdocs.yml</code> file is    located.</p> </li> <li> <p>To start the local development server and preview changes, run the following    command:</p> </li> </ol> <pre><code>mkdocs serve\n</code></pre> <p>This will compile the documentation and serve it locally. You can access the documentation by opening a web browser and navigating to http://localhost:8000.</p> <ol> <li> <p>Edit Documentation: Make changes to the documentation content files located    in the <code>docs</code> directory. You can use Markdown syntax for formatting.</p> </li> <li> <p>Preview Changes: As you make changes, the local development server will    automatically detect them and update the preview in real-time. Refresh your    browser to see the changes.</p> </li> </ol> <p>N.B. There is a known issue with mkdocs not alwayds finding Cairo. The issue and suggested fixes are on the MkDocs Image Processing page.</p>"},{"location":"tutorials/building_r/","title":"Building R","text":"<p>1) Environment variables</p> <ul> <li>We have environment variables defining paths to directories for building R and   storing the source code.</li> <li><code>BUILDDIR</code> defines the build directory: <code>/workspaces/r-dev-env/build/r-devel</code>.</li> <li><code>TOP_SRCDIR</code> defines the source directory: <code>/workspaces/r-dev-env/svn/r-devel</code></li> <li> <p>The environment variables are set in the codespace image and are available   when the codespace starts.</p> <p></p> </li> </ul> <p>2) svn checkout</p> <ul> <li>The svn checkout command lets us create a local copy of a specific tag/branch   of a repository.</li> <li> <p>We can check out the latest version of the trunk (the main branch) of the R   sources to $TOP_SRCDIR as follows:</p> <pre><code>svn checkout https://svn.r-project.org/R/trunk/ $TOP_SRCDIR\n</code></pre> </li> <li> <p>Output : We get file structure something like this after checking out R source   code from R svn repository.</p> <p></p> </li> </ul> <p>3) Download recommended packages for R</p> <p>To build R with the recommended packages, we need to run the <code>tools/rsync-recommended</code> script from the source directory to download the source code for these packages:</p> <pre><code>$TOP_SRCDIR/tools/rsync-recommended\n</code></pre> <p></p> <p>4) Change to the build directory</p> <ul> <li> <p>To keep the source directory clean, we change to a build directory to   configure and build R.</p> </li> <li> <p>First create the directory specified by the BUILDDIR environment variable.</p> </li> </ul> <pre><code>mkdir -p $BUILDDIR\n</code></pre> <ul> <li>Then we can change directory from root to the build directory.</li> </ul> <pre><code>cd $BUILDDIR\n</code></pre> <p>5) Configure the build</p> <ul> <li>After we change directory, we must run the configure script from the source directory.  This step takes ~1 minute on the codespace.</li> </ul> <pre><code>$TOP_SRCDIR/configure --with-valgrind-instrumentation=1\n</code></pre> <p>Note</p> <p>The <code>--with-valgrind-instrumentation</code> option is set to 1 for effective use of valgrind. See the Using valgrind section of the R-admin manual for more information.</p> <ul> <li>The configure cmd prepares for building R, creating files and folders inside   the BUILDDIR directory.</li> <li> <p>Output : We get file structure something like this after using configure   command.</p> <p></p> </li> </ul> <p>6) Build R</p> <p>Having configured R, we run <code>make</code> to build R. This take 5-10 minutes on the codespace.</p> <pre><code>make\n</code></pre> <p>7) Check R</p> <p>Check that the build of R passes R's standard checks:</p> <pre><code>make check\n</code></pre> <p>This takes a couple of minutes in the codespace. The check will stop with a error message if any of the tests fail. If this happens, see SVN Help for how to revert to a version that passes check.</p> <p>8) Make R terminals use the built R</p> <p>Run the <code>which_r</code> script to set which R to use for R terminals in VSCode. When prompted, enter the number corresponding to <code>r-devel</code></p> <pre><code>which_r\n</code></pre> <pre><code>Which version of R should be used in new R terminals?\n  1. R 4.4.0 (release version built into this container)\n  Additional R builds available:\n    2. r-devel\nEnter the number corresponding to the selected version:\n</code></pre> <p>This means that new R terminals will use the version of R you have just built!<sup>1</sup></p> <p>9) Make contributions</p> <ul> <li>After having built the current development version of R, we can now make   changes to the source code and contribute to the project.</li> <li>Follow the R Contribution Workflow tutorial to   learn how to do this.</li> </ul> <ol> <li> <p>To switch back to the release version, run <code>which_r</code> and type <code>1</code>. The selected version is saved in the VSCode settings, so will be saved when you stop and restart the codespace.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorials/contribution_workflow/","title":"R Contribution Workflow","text":""},{"location":"tutorials/contribution_workflow/#1-example-contribution-workflow-using-the-r-dev-container","title":"1. Example Contribution Workflow using the R Dev Container","text":"<ul> <li> <p>To start working in R we will click on <code>R:(not attach)</code> which is in the bottom   right of the VSCode window. This will open an R terminal for us.</p> <p></p> <p></p> </li> <li> <p>We can now run R commands. We will use the <code>utils::askYesNo()</code> function as an   example</p> <p></p> <pre><code>&gt; askYesNo(\"Is this a good example?\")\nIs this a good example? (Yes/no/cancel) Yes\n[1] TRUE\n</code></pre> </li> </ul>"},{"location":"tutorials/contribution_workflow/#2-editing-source-code","title":"2. Editing Source Code","text":"<ul> <li>Edit the source code of <code>utils::askYesNo()</code> to change the default options. The   source code can be found in <code>$TOP_SRCDIR/src/library/utils/R/askYesNo.R</code>.</li> <li>You can redirect to that file using</li> </ul> <pre><code>code $TOP_SRCDIR/src/library/utils/R/askYesNo.R\n</code></pre> <p>&gt; Before edit: </p> askYesNo.R<pre><code>    prompts = getOption(\"askYesNo\", gettext(c(\"Yes\", \"No\", \"Cancel\"))),\n</code></pre> <p>&gt; With edit (for example - change to whatever you like!):</p> <p></p> askYesNo.R<pre><code>    prompts = getOption(\"askYesNo\", gettext(c(\"Oh yeah!\", \"Don't think so\", \"Cancel\"))),\n</code></pre>"},{"location":"tutorials/contribution_workflow/#3-rebuild-r","title":"3. Rebuild R","text":"<ul> <li>We can re-build R with our changes. Since we have only modified the utils   package, rebuilding R will only re-build the utils package.</li> <li>First we need to be inside $BUILDDIR.</li> <li>Quit R with <code>q()</code> or by closing the R terminal.</li> <li>In the bash terminal, change to the build directory:</li> </ul> <pre><code>cd $BUILDDIR\n</code></pre> <ul> <li>Now run the <code>make</code> command to rebuild R with the changes you made in   step 2. This will be much faster than the full build!</li> </ul> <pre><code>make\n</code></pre> <ul> <li> <p>Optionally run <code>make check</code> to run R's test suite with your local changes. You   may skip this step while you are iterating on a bug fix or other development,   until you are ready to create a patch.</p> </li> <li> <p>To use the re-built R, simply open a new R terminal.</p> </li> </ul>"},{"location":"tutorials/contribution_workflow/#4-cross-check-and-re-running-code","title":"4. Cross check and Re-running Code","text":"<ul> <li> <p>Check the edit has worked as expected by re-running the example code: </p> <pre><code>&gt; askYesNo(\"Is this a good example?\")\nIs this a good example? (Oh yeah!/don't think so/cancel) Oh yeah!\n[1] TRUE\n</code></pre> </li> </ul>"},{"location":"tutorials/multi_r_compilation/","title":"Multiple R Versions","text":"<p>The Building R and R Contribution Workflow tutorials use the simplest set up, working on a single copy of the R sources.</p> <p>It can be helpful to work with multiple versions of R:</p> <ul> <li>to compare your modifications with an unmodified copy, e.g. to compare speed     or memory usage, or</li> <li>to work on independent changes, so that each patch only contains the changes     for one bug fix or new feature.</li> </ul> <p>You can build multiple R versions in the same Codespaces environment.</p> <ol> <li> <p>First choose a name for the R version. This will be used to identify the     version and to name the build/source directory. By default, we use the name     <code>r-devel</code> and the environment variables <code>BUILDDIR</code> and <code>TOP_SRCDIR</code> are set     to match.</p> <p>For illustration, we will use <code>r-devel-raw</code>, which you might use to name a version of R that you never modify.</p> </li> <li> <p>You can set the <code>BUILDDIR</code> and <code>TOP_SRCDIR</code> environment variables to match     your chosen name using the <code>set_build_r</code> function:</p> <ul> <li> <p>Open a terminal in the codespace.</p> </li> <li> <p>Run the <code>set_build_r</code> function with your chosen name as the argument, e.g.</p> <pre><code>set_build_r r-devel-raw\n</code></pre> <p>The new values of the environment variables will be printed as confirmation:</p> <pre><code>BUILDDIR is now set to /workspaces/r-dev-env/build/r-devel-raw\nTOP_SRCDIR is now set to /workspaces/r-dev-env/svn/r-devel-raw\n</code></pre> </li> </ul> </li> <li> <p>If you have an unmodified build of R-devel using the default name of     <code>r-devel</code>, you can simply copy the sources and the build to the new     directories with <code>rsync</code>:</p> <pre><code>rsync -a \"$(dirname \"$BUILDDIR\")/r-devel/\"* $BUILDDIR\nrsync -a \"$(dirname \"$TOP_SRCDIR\")/r-devel/\"* $TOP_SRCDIR\n</code></pre> <p>Otherwise you can follow the steps in the Building R tutorial to checkout the R sources and build R using the new source and build directories.</p> </li> <li> <p>Once you have a build of R under the new build directory, you will see your     chosen name in the choices when running the <code>which_r</code> script to select the     version of R to run in new terminals, e.g.</p> <pre><code>which_r\n</code></pre> <pre><code>Which version of R should be used in new R terminals?\n  1. R 4.4.0 (release version built into this container)\n  Additional R builds available:\n    2. r-devel\n    3. r-devel-raw\nEnter the number corresponding to the selected version:\n</code></pre> </li> </ol> <p>Note</p> <p><code>BUILDDIR</code> and <code>TOP_SRCDIR</code> will be set to the defaults using the label <code>r-devel</code> whenever a new bash terminal is opened, e.g. when the codespace is restarted.</p> <p>Whenever following instructions that use these variables to refer to the build and source directory, be sure they are pointing to the desired version!</p> <p>You can check the values any time with</p> <pre><code>echo $BUILDDIR\necho $TOP_SRCDIR\n</code></pre> <p>and switch with <code>set_build_r &lt;name&gt;</code>.</p>"},{"location":"tutorials/patch_update/","title":"Creating a Patch File","text":"<p>A patch file captures the local changes (additions and deletions) to the source code. It can be shared on R's Bugzilla to propose a change to R, e.g. a fix for a bug.</p> <p>To make a patch</p> <p>1) Update your local copy of the source</p> <p>If you have not recently updated your local copy of the R Subversion repository, follow the instructions in Updating the Source Code to do this first.</p> <p>2) Create a patch file</p> <p>Go to the source directory and use <code>svn diff</code> to create a patch.</p> <p>Use a descriptive patch name with the bug number and a short description, rather than a generic name like <code>patch.diff</code>.</p> <pre><code>cd $TOP_SRCDIR\nsvn diff &gt; $PATCHDIR/16629-infinite-recursion.diff\n</code></pre> <p>The example above uses <code>16629-infinite-recursion.diff</code> - this name follows the convention: bug number (16629), short description (infinite-recursion), and <code>.diff</code> extension, making patches easy to identify and review.</p> <p>The patch file will be saved in the directory specified by the PATCHDIR environment variable that is defined when the codespace starts.</p> <pre><code>ls $PATCHDIR\n</code></pre> <p>lists all patch files in your patch directory, allowing you to easily see and verify the patch files you have created.</p>"},{"location":"tutorials/running_r/","title":"Running R","text":"<p>1) Create a file in VS Code ending with a .R extension. You can create new files by clicking on the new file icon in VS Code Explorer, or use the <code>code</code> command in the terminal to create and open an R file</p> <pre><code>code R/test.R\n</code></pre> <p></p> <p>2) You should see <code>R:(not attached)</code> in the Status Bar at the bottom of the VSCode window.</p> <p></p> <p>3) Click on the <code>R:(not attached)</code> link to launch an R terminal. You can then send code from the <code>.R</code> file to the R terminal by pressing <code>cmd/ctrl + enter</code>.</p> <p> </p>"},{"location":"tutorials/svn_help/","title":"SVN Help","text":""},{"location":"tutorials/svn_help/#checking-out-a-different-revision","title":"Checking out a different revision","text":"<p>You can check out a specific revision of the R sources with</p> <pre><code>svn checkout -r 1234 https://svn.r-project.org/R/trunk/ $TOP_SRCDIR\n</code></pre>"},{"location":"tutorials/svn_help/#finding-the-last-revision-that-passed-check","title":"Finding the last revision that passed check","text":"<p>Occasionally, the latest revision of the R sources does not pass <code>make check</code>. In this case, it can be a good idea to revert to an earlier revision until the R Core Team have made further updates to fix the issue.</p> <p>Visit the Build from SVN page that summarises attempted builds of R using GitHub actions on the unofficial GitHub mirror.  Find the latest run that completed successfully (green checkmark) and use the commit message to search for the corresponding Subversion revision.  For example, to search the last 10 revisions for the log message \"More @apifun and such annotations\"</p> <pre><code>cd $TOP_SRCDIR\nsvn log --limit 10 --search \"More @apifun and such annotations\"\n</code></pre> <pre><code>/workspaces/r-dev-env/svn/r-devel $ svn log --limit 10 --search \"More @apifun and such annotations\"\n------------------------------------------------------------------------\nr86726 | luke | 2024-06-12 18:00:19 +0000 (Wed, 12 Jun 2024) | 2 lines\n\nMore @apifun and such annotations.\n\n------------------------------------------------------------------------\nr86723 | luke | 2024-06-11 20:31:36 +0000 (Tue, 11 Jun 2024) | 2 lines\n\nMore @apifun and such annotations.\n\n------------------------------------------------------------------------\n</code></pre> <p>If you have already attempted to build R, you can re-run the make with the version identified in your search as follows:</p> <pre><code>svn checkout -r 86726 https://svn.r-project.org/R/trunk/ $TOP_SRCDIR\ncd $BUILDDIR\nmake\nmake check\n</code></pre> <p>Otherwise, follow the full instructions in Building R, updating the svn checkout command to use the required revision.</p>"},{"location":"tutorials/svn_help/#further-subversion-help","title":"Further Subversion Help","text":"<p>For further help on Subversion, refer to the online book Version Control with Subversion.</p>"},{"location":"tutorials/update_source/","title":"Updating Source Code","text":"<p>The R Core Team commit changes to the development version of R sometimes multiple times a day. It's a good idea to update your local copy of the source code from time to time, especially before creating a patch. To do so, follow these steps:</p>"},{"location":"tutorials/update_source/#1-close-r-terminal","title":"1) Close R terminal","text":"<p>If you have an R terminal open, quit R or close the terminal.</p>"},{"location":"tutorials/update_source/#2-go-to-the-source-directory","title":"2) Go to the source directory","text":"<p>In a bash terminal, change to the source directory</p> <pre><code>cd $TOP_SRCDIR\n</code></pre>"},{"location":"tutorials/update_source/#3-review-local-changes","title":"3) Review local changes","text":"<p>Use the Subversion diff command to review changes you have made to source code</p> <pre><code>svn diff\n</code></pre>"},{"location":"tutorials/update_source/#4-revert-changes-optional","title":"4) Revert changes (optional)","text":"<p>If you no longer want to keep your local changes, you can revert them.</p> <p>Revert the changes made in specific file</p> <pre><code>svn revert src/library/utils/R/askYesNo.R\n</code></pre> <p>Revert changes in a directory</p> <pre><code>svn revert src/lib/utils\n</code></pre> <p>Revert all local changes</p> <pre><code>svn revert -R .\n</code></pre>"},{"location":"tutorials/update_source/#5-rebuild-and-check-with-any-local-changes","title":"5) Rebuild and check with any local changes","text":"<p>If you have no local changes remaining, skip to the next step.</p> <p>Otherwise, go to the build directory to build and check R with your local changes.</p> <pre><code>cd $BUILDDIR\nmake\nmake check\n</code></pre> <p>If the check fails with an error, you have broken something with your local changes. Fix this before proceeding. Otherwise go back to the source directory to continue</p> <pre><code>cd $TOP_SRCDIR\n</code></pre>"},{"location":"tutorials/update_source/#6-update-using-svn","title":"6) Update using svn","text":"<p>Use the Subversion command <code>update</code> to update your local copy with the latest changes by the R Core Team.</p> <pre><code>svn update\n</code></pre>"},{"location":"tutorials/update_source/#7-rebuild-and-check-with-the-updates","title":"7)  Rebuild and check with the updates","text":"<p>To rebuild R with the latest changes from the R Core Team and any local changes you have kept, go to the build directory to build and check R</p> <pre><code>cd $BUILDDIR\nmake\nmake check\n</code></pre> <p>If the check fails, this will be due to recent changes made by the R Core Team. See SVN Help for how to revert to a version that passes check.</p>"}]}